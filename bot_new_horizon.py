# –ó–∞–¥–∞—ë–º UTC-8 —à–∏—Ñ—Ä–∞—Ü–∏—é
# -*- coding: utf-8 -*-
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å—ë, —á—Ç–æ —Ç–æ–ª—å–∫–æ –º–æ–∂–Ω–æ
import logging
import os
import random
from os import listdir
from os.path import join, isfile

from aiogram import Bot, Dispatcher, executor, types
from config import Token
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

# —Ö–∑ —á—ë —Ç—É—Ç, –ø–æ—Ö–æ–¥—É –∏–∑ –∫–æ–Ω—Ñ–∏–≥ —Ñ–∞–π–ª–∞ –ª–æ–≥–∏—Ä—É–µ–º –±–æ—Ç-—Ç–æ–∫–µ–Ω
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –≤–∫–ª—é—á–∞–µ–º –±–æ—Ç-—Ç–æ–∫–µ–Ω –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=Token)
dp = Dispatcher(bot)

directory = '/root/asana_bot/Arunodaya/bot_data/catalog/'
directory_2 = '/root/asana_bot/Arunodaya/bot_data/basics/'
directory_3 = '/root/asana_bot/Arunodaya/bot_data/steps/'
asana_types = [item for item in listdir(directory) if not isfile(join(directory, item))]
asana_types_random = [item for item in listdir(directory) if isfile(join(directory, item))]
asana_list = []
asana_data = {}

# basics and step list's for work

basics_types = []
basics_types1 = [item for item in listdir(directory_2) if isfile(join(directory_2, item))]
for basic in basics_types1:
    basic = basic[:-4:]
    basics_types.append(basic)
basics_types = list(set(basics_types))
basics_types.sort()

steps_types = []
steps_types1 = [item for item in listdir(directory_3) if isfile(join(directory_3, item))]
for step in steps_types1:
    step = step[:-4:]
    steps_types.append(step)
steps_types.sort()


# list of asanas for random.choice

random_asana_list = []

# string with asana from random_asana_lift after random.choice()

randomize_asana = ''

for asana_type in asana_types:

    # get only files

    file_list = [os.path.splitext(item)[0] for item in listdir(os.path.join(directory, asana_type)) if isfile(join(directory, asana_type, item))]

    # remove duplicates

    file_list = list(set(file_list))
    asana_data[asana_type] = file_list
    asana_list.extend(file_list)

directory1 = ''

for i in asana_types:
    directory1 = directory + i
    l = [os.path.splitext(item)[0] for item in listdir(os.path.join(directory1)) if isfile(join(directory1, item))]
    l = list(set(l))
    random_asana_list.append(l)
    directory1 = ''

# TODO: change this approach
asana_types_description = {
    'sit_lie': ['–ê—Å–∞–Ω—ã —Å–∏–¥—è –∏ –ª—ë–∂–∞', '–°–ø–∏—Å–æ–∫ –∞—Å–∞–Ω —Å–∏–¥—è –∏ –ª—ë–∂–∞'],
    'stay': ['–ê—Å–∞–Ω—ã —Å—Ç–æ—è', '–°–ø–∏—Å–æ–∫ –∞—Å–∞–Ω —Å—Ç–æ—è'],
    'hand': ['–ë–∞–ª–∞–Ω—Å—ã –Ω–∞ —Ä—É–∫–∞—Ö', '–°–ø–∏—Å–æ–∫ –±–∞–ª–∞–Ω—Å–æ–≤ –Ω–∞ —Ä—É–∫–∞—Ö'],
    'coup': ['–ü–µ—Ä–µ–≤—ë—Ä–Ω—É—Ç—ã–µ –∞—Å–∞–Ω—ã', '–°–ø–∏—Å–æ–∫ –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç—ã—Ö –∞—Å–∞–Ω'],
    'sag': ['–ü—Ä–æ–≥–∏–±—ã', '–°–ø–∏—Å–æ–∫ –∞—Å–∞–Ω —Å –ø—Ä–æ–≥–∏–±–∞–º–∏'],
    'power': ['–°–∏–ª–æ–≤—ã–µ –∞—Å–∞–Ω—ã', '–°–ø–∏—Å–æ–∫ —Å–∏–ª–æ–≤—ã—Ö –∞—Å–∞–Ω'],
}

# Menu of asana's

main_markup = InlineKeyboardMarkup() \
    .add(InlineKeyboardButton('!–ö–∞—Ç–∞–ª–æ–≥ –∞—Å–∞–Ω!', callback_data='catalog'))\
    .add(InlineKeyboardButton('–û—Å–Ω–æ–≤—ã –π–æ–≥–∏', callback_data='basics'))\
    .add(InlineKeyboardButton('8 —Å—Ç—É–ø–µ–Ω–µ–π –π–æ–≥–∏', callback_data='steps'))\
    .add(InlineKeyboardButton('–ê—Å–∞–Ω–∞ –¥–Ω—è, —Å–æ–≥–ª–∞—Å–Ω–æ –∫–∞—Ä–º–µ', callback_data='random_asana'))

menu_keyboard = InlineKeyboardMarkup()
for asana_type in asana_types:
    menu_keyboard.add(InlineKeyboardButton(asana_types_description[asana_type][0], callback_data=asana_type))

menu_basics_keyboard = InlineKeyboardMarkup()
for basic in basics_types:
    menu_basics_keyboard.add(InlineKeyboardButton(basic, callback_data=basic))

menu_steps_keyboard = InlineKeyboardMarkup()
for step in steps_types:
    menu_steps_keyboard.add(InlineKeyboardButton(step, callback_data=step))


# START command
@dp.message_handler(commands=['start'])
async def process_start_command(message: types.Message):
    await message.reply("–ù–∞–º–∞—Å–∫–∞—Ä!\n–≠—Ç–æ YogaBot - —ç–Ω—Ü–∏–∫–ª–æ–ø–µ–¥–∏—è –π–æ–≥–∏—á–µ—Å–∫–∏—Ö –∞—Å–∞–Ω!\n–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞—Å–∞–Ω—ã –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä: –±–∞–∫–∞—Å–∞–Ω–∞ –∏–ª–∏ –∞–¥—Ö–æ –º—É–∫—Ö–∞ —à–≤–∞–Ω–∞—Å–∞–Ω–∞!\n\n–ï—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—à—å –Ω–∞–∑–≤–∞–Ω–∏–π –∞—Å–∞–Ω, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è —É–¥–æ–±–Ω—ã–º –ö–∞—Ç–∞–ª–æ–≥–æ–º –∞—Å–∞–Ω, –≥–¥–µ –≤—Å–µ –ø–æ–∑—ã –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω—ã –ø–æ —Ä–∞–∑–¥–µ–ª–∞–º.\n\n–ù–∞–π–¥–∏ –Ω—É–∂–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞—Å–∞–Ω—ã –∏ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å –Ω–∏–º!",
        reply_markup=main_markup)


# HELP command
@dp.message_handler(commands=['help'])
async def help_command(message: types.Message):
    await message.reply(
        '–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞—Å–∞–Ω—ã –∏ –ø–æ–ª—É—á–∏—à—å –µ—ë –æ–ø–∏—Å–∞–Ω–∏–µ –∏ —Ñ–æ—Ç–æ\n\n –ï—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—à—å –Ω–∞–∑–≤–∞–Ω–∏–π –∞—Å–∞–Ω, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è —É–¥–æ–±–Ω—ã–º –ö–∞—Ç–∞–ª–æ–≥–æ–º –∞—Å–∞–Ω, –≥–¥–µ –≤—Å–µ –ø–æ–∑—ã –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω—ã –ø–æ —Ä–∞–∑–¥–µ–ª–∞–º. –ñ–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∏ –ø–æ–ª—É—á–∏—à—å –ø–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –æ—Ç—Å—Ç—Ä–æ–π–∫—É –∞—Å–∞–Ω—ã. –ê —Ç–∞–∫–∂–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —Ñ–æ—Ç–æ —Å –Ω–µ–π!\n–û—á–∏—Å—Ç–∏ —Å–≤–æ—é –∫–∞—Ä–º—É, –≤—ã–ø–æ–ª–Ω–∏–≤ –ê—Å–∞–Ω—É –¥–Ω—è!üßòü§∏‚Äç‚ôÇÔ∏èüôè\n\n–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞:\n\n----> /start üöÄ - –ê–∫—Ç–∏–≤–∞—Ü–∏—è YogaBot\n----> /info - –ü–æ–ª–µ–∑–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞—Å–∞–Ω–∞—Ö ‚ùì‚ùóÔ∏è\n----> /about_us - –æ–± –∞–≤—Ç–æ—Ä–∞—Ö –∏ —Ä–µ–∞–ª–∏–∑–∞—Ç–æ—Ä–∞—Ö –ø—Ä–æ–µ–∫—Ç–∞',
        reply_markup=main_markup)

# WHAT command

@dp.message_handler(commands=['what'])
async def what_command(message: types.Message):
    await message.reply(
        '‚úÖ–ë–æ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –±–æ–ª–µ–µ 100 –∞—Å–∞–Ω –π–æ–≥–∏.\n\n –î–ª—è –∏—Ö –ø–æ–∏—Å–∫–∞ –ø–µ—Ä–µ–π–¥–∏ –≤ —Ä–∞–∑–¥–µ–ª ¬´!–ö–∞—Ç–∞–ª–æ–≥ –∞—Å–∞–Ω!¬ª, –≤—ã–±–µ—Ä–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π, –≤ –∫–æ—Ç–æ—Ä–æ–º –∞—Å–∞–Ω—ã —É–¥–æ–±–Ω–æ –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω—ã, –Ω–∞–π–¥–∏ –≤ –Ω–µ–º –Ω—É–∂–Ω—É—é –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –∏ –Ω–∞–∂–º–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—Éüü¢ \n–ï—Å–ª–∏ –∑–Ω–∞–µ—à—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∞—Å–∞–Ω—ã , —Ç–æ –≤–≤–µ–¥–∏ –µ–≥–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä: –ë–∞–∫–∞—Å–∞–Ω–∞ –∏–ª–∏ –ê–¥—Ö–æ –º—É–∫—Ö–∞ —à–≤–∞–Ω–∞—Å–∞–Ω–∞!‚å®Ô∏è \n\n‚úÖ–ë–æ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –±–∞–∑–æ–≤—ã–µ –ø–æ–Ω—è—Ç–∏—è –π–æ–≥–∏ –≤ —Ä–∞–∑–¥–µ–ª–∞—Ö ¬´–û—Å–Ω–æ–≤—ã –π–æ–≥–∏¬ª –∏ ¬´8 —Å—Ç—É–ø–µ–Ω–µ–π –π–æ–≥–∏¬ª. –í—ã–±–µ—Ä–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª, –Ω–∞–π–¥–∏ –≤ –Ω–µ–º –Ω—É–∂–Ω—É—é —Ç–µ–º—É, –Ω–∞–∂–º–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É üü¢ –∏ –ø–æ–ª—É—á–∏ –µ–≥–æ –æ–ø–∏—Å–∞–Ω–∏–µ.', reply_markup=main_markup)


# Info command
@dp.message_handler(commands=['info'])
async def help_command(message: types.Message):
    await message.reply(
        '–ê—Å–∞–Ω–∞ - —Å—Ç–∞—Ç–∏—á–Ω–∞—è –ø–æ–∑–∞, —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –¥—Ä–µ–≤–Ω–∏–º–∏ –º—É–¥—Ä–µ—Ü–∞–º–∏ —Ç–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, —á—Ç–æ–±—ã –æ–∫–∞–∑–≤–∞—Ç—å –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–µ –≤–æ–∑–¥–µ—Å—Ç–≤–∏–µ –Ω–∞ —Ä–∞–∑—É–º.\n–ü–æ—Å—Ä–µ–¥—Å—Ç–≤–æ–º —Ä–∞—Å—Ç—è–≥–∏–≤–∞–Ω–∏—è-—Å–∂–∏–º–∞–Ω–∏—è, —Å–∫—Ä—É—á–∏–≤–∞–Ω–∏—è —Ñ–∏–∑–∏—á–µ—Å–∫–æ–≥–æ —Ç–µ–ª–∞, –∏ –∏—Å–ø–æ–ª—å–∑—É—è –º–µ—Ç–æ–¥ –¥–∏–∞—Ñ—Ä–∞–≥–º–∞–ª—å–Ω–æ–≥–æ –¥—ã—Ö–∞–Ω–∏—è –≤–æ –≤—Ä–µ–º—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π, –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ–µ –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ —ç–Ω–¥–æ–∫—Ä–∏–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É –∂–µ–ª–µ–∑ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π —Å–µ–∫—Ä–µ—Ü–∏–∏ —á–µ–ª–æ–≤–µ–∫–∞. –ß—Ç–æ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º –æ–±—Ä–∞–∑–æ–º —Å–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø—Å–∏—Ö–∏–∫–∏. –ò –º–µ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ –∑–¥–æ—Ä–æ–≤—å—è —á–µ–ª–æ–≤–µ–∫–∞ –≤ —Ü–µ–ª–æ–º.\n–î–∞–ª–µ–µ –æ–∑–¥–æ—Ä–æ–≤–ª—ë–Ω–Ω–∞—è –ø—Å–∏—Ö–∏–∫–∞ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω–æ–µ —Ç–µ–ª–æ —Å–ª—É–∂–∞—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–º –¥–ª—è –ø–æ–∑–Ω–∞–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –≤ –º–µ–¥–∏—Ç–∞—Ü–∏–∏.\n–î—É—Ö–∞. –í—ã—Å—à–µ–≥–æ —Å–æ–∑–Ω–∞–Ω–∏—è. –ò—Å—Ç–∏–Ω—ã. –ë–æ–≥–∞. –¢–≤–æ—Ä—Ü–∞.\n\n\n–¢–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, –∞—Å–∞–Ω–∞ - –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ–π –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–æ–π –∏–ª–∏ –æ—Ç–¥–µ–ª—å–Ω–æ–π –π–æ–≥–æ–π. –ê—Å–∞–Ω–∞ —è–≤–ª—è–µ—Ç—Å—è –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–∞–∫—Ç–∏–∫–æ–π, –ø—Ä–∏–∑–≤–∞–Ω–Ω–æ–π –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å —Ä–∞–∑—É–º –∏ —Ç–µ–ª–æ –∫ –º–µ–¥–∏—Ç–∞—Ü–∏–∏.\n\n\n–ë–æ—Ç –Ω–æ—Å–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä. –ù–µ –≤—ã–ø–æ–ª–Ω—è–π—Ç–µ –∞—Å–∞–Ω—ã —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ, –µ—Å–ª–∏ –∏–º–µ–µ—Ç–µ —Ö—Ä–æ–Ω–∏—á–µ—Å–∫–∏–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è, –ø—Å–∏—Ö–∏—á–µ—Å–∫–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è. –†–µ–∫–æ–º–µ–¥–Ω—É–µ—Ç—Å—è –æ—Å–≤–∞–∏–≤–∞—Ç—å —ç—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –π–æ–≥–∏ —Å –æ–ø—ã—Ç–Ω—ã–º –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–º. –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤—ã–ø–æ–ª–Ω—è–π—Ç–µ —Ä–∞–∑–º–∏–Ω–∫—É –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –ø—Ä–∞–∫—Ç–∏–∫–∏.',
        reply_markup=main_markup)


# About_us command
@dp.message_handler(commands=['about_us'])
async def help_command(message: types.Message):
    await message.reply(
        '–ê—Ä—É–Ω–æ–¥–∞—è - —Å—Ç–∞—Ä—à–∏–π –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç(–∫–æ–¥—Ä–µ–≤—å—é, —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥, –∫–æ–¥–∏–Ω–≥, –º—É–¥—Ä—ã–µ —Å–æ–≤–µ—Ç—ã). –ô–æ–≥–∏–Ω! --> @Arun0daya \n\n–û–ª–µ–≥ - –∞–≤—Ç–æ—Ä –ø—Ä–æ–µ–∫—Ç–∞ online-—à–∫–æ–ª—ã –π–æ–≥–∏ Dharana.ru, —á–∞—Å—Ç—å—é –∫–æ—Ç–æ—Ä–æ–≥–æ —è–≤–ª—è–µ—Ç—Å—è —ç—Ç–æ—Ç –±–æ—Ç(–§–æ—Ç–æ, –æ–ø–∏—Å–∞–Ω–∏–µ, –∏–¥–µ–∏, –º–∞—Ä–∫–µ—Ç–∏–Ω–≥). –ô–æ–≥–∏–Ω!--> @yogaolleg \nwww.instagram.com/yogaolleg/ \n\n–†–∏—à–∏–¥—ç–≤ - –∞–≤—Ç–æ—Ä –±–æ—Ç–∞, –∏–¥–µ–π–Ω—ã–π –≤–¥–æ—Ö–Ω–æ–≤–∏—Ç–µ–ª—å –ø—Ä–æ–µ–∫—Ç–∞ online-—à–∫–æ–ª—ã –π–æ–≥–∏ Dharana.ru. –ú–ª–∞–¥—à–∏–π –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç(–∫–æ–¥–∏–Ω–≥, –∞—Å–∞–Ω—ã). –ô–æ–≥–∏–Ω! --> @RrshiDev',
        reply_markup=main_markup)


# Print txt & photo of asana
@dp.message_handler()
async def echo(message: types.Message):
    x = message.text
    x = x.title()
    if x in asana_list:
        await replay_with_asana_data(x, message, message.from_user.id)
    else:
        await message.answer('–ü—Ä–æ–≤–µ—Ä—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∫–∞—Ç–∞–ª–æ–≥–æ–º –∞—Å–∞–Ω!', reply_markup=main_markup)


# work of menu
@dp.callback_query_handler(lambda c: c.data == 'catalog')
async def callback(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, '–†–∞–∑–¥–µ–ª—ã –∞—Å–∞–Ω:', reply_markup=menu_keyboard)
# menu asana type handler
@dp.callback_query_handler(lambda c: c.data in asana_types)
async def callback(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id,
                           f'{asana_types_description[callback_query.data][1]} –ø—Ä–∏–≤–µ–¥–µ–Ω –Ω–∏–∂–µ.\n–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É —Å –∏—Å–∫–æ–º–æ–π –∞—Å–∞–Ω–æ–π\n–ü–æ–ª—É—á–∏—à—å –µ—ë —Ñ–æ—Ç–æ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ!')
    for asana in asana_data[callback_query.data]:
        asana_button = InlineKeyboardMarkup().add(InlineKeyboardButton(asana, callback_data=asana))
        await bot.send_message(callback_query.from_user.id, '–ô–æ–≥–∏—á–µ—Å–∫–∞—è –ø–æ–∑–∞', reply_markup=asana_button)
        with open(os.path.join(directory, callback_query.data, f'{asana}.png'), 'rb') as f:
            img = f.read()
            await bot.send_photo(callback_query.from_user.id, img)
async def replay_with_asana_data(data, message, user_id):
    # get asana type
    asana_files_path = ''
    for a_type, a_list in asana_data.items():
        if data in a_list:
            asana_files_path = join(directory, a_type, data)
            break
    with open(f'{asana_files_path}.txt', 'r') as t:
        with open(f'{asana_files_path}.jpg', 'rb') as f:
            txt = t.read()
            img = f.read()
            await bot.send_message(user_id, txt)
            await bot.send_photo(user_id, img)
            await message.reply('–ö–∞—Ç–∞–ª–æ–≥', reply_markup=main_markup)


# Print txt & photo of asana by buttons
@dp.callback_query_handler(lambda c: c.data in asana_list)
async def callback(callback_query: types.CallbackQuery):
    await replay_with_asana_data(callback_query.data, callback_query.message, callback_query.from_user.id)

# Random_asana_button workship
@dp.callback_query_handler(lambda c: c.data == 'random_asana')
async def callback(callback_query: types.CallbackQuery):
    randomize_asana = random.choice(random.choice(random_asana_list))
    for a_type, a_list in asana_data.items():
        asana_files_path = ''
        if randomize_asana in a_list:
            asana_files_path = join(directory, a_type, randomize_asana)
            break

    with open(f'{asana_files_path}.txt', 'r') as t:
        with open(f'{asana_files_path}.jpg', 'rb') as f:
            txt = t.read()
            img = f.read()
            await bot.send_message(callback_query.from_user.id, txt)
            await bot.send_photo(callback_query.from_user.id, img)
            await bot.send_message(callback_query.from_user.id, text='–ö–∞—Ç–∞–ª–æ–≥', reply_markup=main_markup)


# handlers for basics ans steps of yoga parts

@dp.callback_query_handler(lambda c: c.data == 'basics')
async def callback(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, '–û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–Ω—è—Ç–∏—è –∏ —Ç–µ—Ä–º–∏–Ω—ã –π–æ–≥–∏:', reply_markup=menu_basics_keyboard)

@dp.callback_query_handler(lambda c: c.data in basics_types)
async def callback(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, '–†–∞–∑–¥–µ–ª –π–æ–≥–∏:')
    bp = callback_query.data + '.png'
    bt = callback_query.data + '.txt'
    if bp in basics_types1:
        with open(os.path.join(directory_2, bt), 'r') as t:
            with open(os.path.join(directory_2, bp), 'rb') as p:
                txt = t.read()
                img = p.read()
                if len(txt) > 4096:
                    for sim in range(0, len(txt), 4096):
                        await bot.send_message(callback_query.from_user.id, txt[sim:sim+4096])
                    await bot.send_photo(callback_query.from_user.id, img)
                    await bot.send_message(callback_query.from_user.id, text='–ö–∞—Ç–∞–ª–æ–≥', reply_markup=main_markup)
                else:
                    await bot.send_message(callback_query.from_user.id, txt)
                    await bot.send_photo(callback_query.from_user.id, img)
                    await bot.send_message(callback_query.from_user.id, text='–ö–∞—Ç–∞–ª–æ–≥', reply_markup=main_markup)
    elif bt in basics_types1:
        with open(os.path.join(directory_2, bt), 'r') as t:
            txt = t.read()
            if len(txt) > 4096:
                for sim in range(0, len(txt),4096):
                    await bot.send_message(callback_query.from_user.id, txt[sim:sim+4096])
                await bot.send_message(callback_query.from_user.id, text='–ö–∞—Ç–∞–ª–æ–≥', reply_markup=main_markup)
            else:
                await bot.send_message(callback_query.from_user.id, txt)
                await bot.send_message(callback_query.from_user.id, text='–ö–∞—Ç–∞–ª–æ–≥', reply_markup=main_markup)

                #await message.reply('–ö–∞—Ç–∞–ª–æ–≥', reply_markup=main_markup)


@dp.callback_query_handler(lambda c: c.data == 'steps')
async def callback(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id,'8 —Å—Ç—É–ø–µ–Ω–µ–π –π–æ–≥–∏:',reply_markup=menu_steps_keyboard)
@dp.callback_query_handler(lambda c: c.data in steps_types)
async def callback(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, '–°—Ç—É–ø–µ–Ω—å –π–æ–≥–∏:')
    st = callback_query.data + '.txt'
    if st in steps_types1:
        with open(os.path.join(directory_3, st),'r') as t:
            txt = t.read()
            if len(txt) >= 4096:
                for sim in range(0, len(txt), 4096):
                    await bot.send_message(callback_query.from_user.id, txt[sim:sim + 4096])
                await bot.send_message(callback_query.from_user.id, text='–ö–∞—Ç–∞–ª–æ–≥', reply_markup=main_markup)
                await message.reply('–ö–∞—Ç–∞–ª–æ–≥', reply_markup=main_markup)
            else:
                await bot.send_message(callback_query.from_user.id, txt)
                await bot.send_message(callback_query.from_user.id, text='–ö–∞—Ç–∞–ª–æ–≥', reply_markup=main_markup)
                await message.reply('–ö–∞—Ç–∞–ª–æ–≥', reply_markup=main_markup)


# Non-stop bot-work
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
